<?php

namespace App;

use App\Enums\LeaveType;
use App\Traits\UsesUuid;
use BenSampo\Enum\Traits\CastsEnums;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Session\SessionManager;
use Illuminate\Session\Store;
use OwenIt\Auditing\Contracts\Auditable;

/**
 * @method static where(string $string, SessionManager|Store $session)
 * @property mixed casual
 * @property mixed from
 * @property mixed to
 * @property mixed earned
 * @property mixed annual
 */
class Leave extends Model implements Auditable
{
    use UsesUuid, CastsEnums, SoftDeletes, \OwenIt\Auditing\Auditable;

    protected $casualLeave = 15;
    protected $annualLeave = 60;
    protected $earnedLeave = 60;

    protected $fillable = ['from', 'to', 'type', 'days'];

    protected $enumCasts = [
        'type' => LeaveType::class
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::creating(function ($model) {
            $model->setNoOfDaysLeave();
        });
        self::updating(function ($model) {
            $model->setNoOfDaysLeave();
        });
    }

    /**
     * @return BelongsTo
     */
    public function army()
    {
        return $this->belongsTo(Army::class);
    }
//
//    /**
//     * @param $value
//     * @return false|string
//     */
//    public function getFromAttribute($value)
//    {
//        return date('d-m-Y', strtotime($value));
//    }
//

//
//
//    /**
//     * @param $value
//     * @return false|string
//     */
//    public function getToAttribute($value)
//    {
//        return date('d-m-Y', strtotime($value));
//    }
//


    /**
     *
     */
    public function setNoOfDaysLeave()
    {
        $this->attributes['days'] = (Carbon::parse($this->from)->diffInDays(Carbon::parse($this->to)));
    }


    /**
     * @return int
     */
    public function getRemainingAttribute()
    {
        return (Carbon::today()->diffInDays(Carbon::parse($this->to)));
    }

//
//    /**
//     * @param $value
//     * @return mixed
//     */
//    public function setAnnualAttribute($value)
//    {
//        $this->attributes['annual'] = $value;
//    }
//
//    /**
//     * @param $value
//     * @return mixed
//     */
//    public function setCasualAttribute($value)
//    {
//        $this->attributes['casual'] = $value;
//    }
//
//    /**
//     * @param $value
//     * @return mixed
//     */
//    public function getAnnualAttribute($value)
//    {
//        return $value;
//    }
//
//    /**
//     * @param $value
//     * @return mixed
//     */
//    public function getEarnedAttribute($value)
//    {
//        return $value;
//    }
//
//    /**
//     * @param $value
//     * @return mixed
//     */
//    public function getCasualAttribute($value)
//    {
//        return $value;
//    }
//
//
//    /**
//     * @return int
//     */
//    public function getCasualRemainAttribute()
//    {
//        return $this->casualLeave - $this->casual;
//    }

//    /**
//     * @return mixed
//     */
//    public function getAnnualRemainAttribute()
//    {
//        return $this->annualLeave - $this->annual;
//    }

//    /**
//     * @return mixed
//     */
//    public function getEarnedRemainAttribute()
//    {
//        return $this->earnedLeave - $this->earned;
//    }

}
